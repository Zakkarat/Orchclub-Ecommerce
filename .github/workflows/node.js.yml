# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master, dev ]

jobs:
  build:

    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:10.10
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_DATABASE }}
        ports:
          - 5432/tcp
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5


    strategy:
      matrix:
        node-version: [10.x, 12.x, 14.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm run ci
    - run: npm run lint
    - run: docker-compose build --build-arg PG_HOST=${{ secrets.DB_HOST }} --build-arg PG_PASSWORD=${{ secrets.DB_PASSWORD }} --build-arg PG_DB=${{ secrets.DB_DATABASE }} --build-arg PG_USER=${{ secrets.DB_USER }} server
    - run: npm run test
      env:
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_DATABASE: ${{ secrets.DB_DATABASE }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        NODE_ENV: ${{ secrets.NODE_ENV }}
    - run: npm run build    
